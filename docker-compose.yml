---
version: "3.8"
volumes:
  pgdata:

services:
  traefik:
    image: traefik:v2.3.1
    restart: always
    command:
      - --api.dashboard=true
      - --providers.docker
      - --providers.docker.exposedByDefault=false
      - --providers.file.directory=/etc/traefik/rules/
      - --providers.file.watch=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.http.http.redirections.entryPoint.scheme=https
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # uncomment when testing
      # - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      # - --certificatesResolvers.dns-cloudflare.acme.storage=/etc/traefik/acme/acme.json
      # - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      # - --certificatesresolvers.dns-cloudflare.acme.dnschallenge=true
      # - --certificatesresolvers.dns-cloudflare.acme.dnschallenge.delaybeforecheck=10
    ports:
      - "80:80"
      - "443:443"
    dns:
      - 1.1.1.1
    volumes:
      - ./traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DOMAIN: "$DOMAIN"

  db:
    build:
      context: postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - pgdata:/var/lib/postgresql/data

  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DIR: dcms
    labels:
      traefik.enable: "true"
      traefik.docker.network: web
      ## http routers
      traefik.http.routers.api-rtr.entrypoints: https
      traefik.http.routers.api-rtr.rule: Host(`api.$DOMAIN`) && PathPrefix(`$API_ROOT_PATH`)
      traefik.http.routers.api-rtr.tls: "true"
      traefik.http.middlewares.api-prefix.stripPrefix.prefixes: $API_ROOT_PATH
      ## middlewares
      traefik.http.routers.api-rtr.middlewares: api-prefix
    environment:
      DATABASE_URL: postgresql://user:pass@db/db
      API_ROOT_PATH: $API_ROOT_PATH
      DOMAIN: $DOMAIN
      DISCORD_CLIENT_ID: $DISCORD_CLIENT_ID
      DISCORD_CLIENT_SECRET: $DISCORD_CLIENT_SECRET
    depends_on:
      - db

  bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DIR: cms_bot
    environment:
      DATABASE_URL: postgresql://user:pass@db/db
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      COMMAND_PREFIX: ${COMMAND_PREFIX}
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: prod.Dockerfile
      args:
        REACT_APP_API_BASE: https://api.$DOMAIN$API_ROOT_PATH
    restart: always
    depends_on:
      - api
    labels:
      traefik.enable: "true"
      traefik.docker.network: web
      ## http routers
      traefik.http.routers.frontend-rtr.entrypoints: https
      traefik.http.routers.frontend-rtr.rule: Host(`$DOMAIN`)
      traefik.http.routers.frontend-rtr.tls: "true"
